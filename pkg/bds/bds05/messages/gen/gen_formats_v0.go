// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates list_converter.go. It can be invoked by running
// go generate

package main

import (
	"log"
	"os"
	"text/template"
	"time"
)

func main() {
	generateFile("format_09_v0.go", "Format09V0", true)
	generateFile("format_10_v0.go", "Format10V0", true)
	generateFile("format_11_v0.go", "Format11V0", true)
	generateFile("format_12_v0.go", "Format12V0", true)
	generateFile("format_13_v0.go", "Format13V0", true)
	generateFile("format_14_v0.go", "Format14V0", true)
	generateFile("format_15_v0.go", "Format15V0", true)
	generateFile("format_16_v0.go", "Format16V0", true)
	generateFile("format_17_v0.go", "Format17V0", true)
	generateFile("format_18_v0.go", "Format18V0", true)
	generateFile("format_20_v0.go", "Format20V0", false)
	generateFile("format_21_v0.go", "Format21V0", false)
	generateFile("format_22_v0.go", "Format22V0", false)
}

func generateFile(fileName string, name string, isBaro bool) {
	// Open the target file
	f, err := os.Create(fileName)
	if err != nil {
		log.Fatal(err)
	}

	// Close at the end
	defer func() {
		closeErr := f.Close()
		if closeErr != nil {
			log.Fatal(err)
		}
	}()

	// Execute the template
	err = builderTemplate.Execute(
		f,
		struct {
			Timestamp time.Time
			Name      string
			IsBaro    bool
		}{
			Timestamp: time.Now(),
			Name:      name,
			IsBaro:    isBaro,
		})
	if err != nil {
		log.Fatal(err)
	}
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var builderTemplate = template.Must(template.New("").Parse(`// Package messages holds the definition of the messages
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_formats_v0.go at {{ .Timestamp }}
package messages

import (
	"fmt"
	"github.com/twuillemin/modes/pkg/bds/adsb"
	"github.com/twuillemin/modes/pkg/bds/bds"
	"github.com/twuillemin/modes/pkg/bds/bds05/fields"
)

// ------------------------------------------------------------------------------------
//
//                                {{ .Name }}
//
// ------------------------------------------------------------------------------------

// {{ .Name }} is a message at the format BDS 0,5 for ADSB V0
type {{ .Name }} struct {
	SurveillanceStatus        fields.SurveillanceStatus
	SingleAntennaFlag         fields.SingleAntennaFlag
	Altitude                  fields.Altitude
	Time                      fields.Time
	CPRFormat                 fields.CompactPositionReportingFormat
	EncodedLatitude           fields.EncodedLatitude
	EncodedLongitude          fields.EncodedLongitude
	HorizontalProtectionLimit fields.HorizontalProtectionLimit{{ if .IsBaro }}Barometric{{ else }}GNSS{{ end }}
	ContainmentRadius         fields.ContainmentRadius{{ if .IsBaro }}Barometric{{ else }}GNSS{{ end }}
}

// GetMessageFormat returns the ADSB format of the message
func (message *{{ .Name }}) GetMessageFormat() adsb.MessageFormat {
	return adsb.{{ .Name }}
}

// GetRegister returns the register of the message
func (message *{{ .Name }}) GetRegister() bds.Register {
	return adsb.{{ .Name }}.GetRegister()
}

// ToString returns a basic, but readable, representation of the message
func (message *{{ .Name }}) ToString() string {
	return bds05v0ToString(message)
}

// GetSurveillanceStatus returns the Surveillance Status
func (message *{{ .Name }}) GetSurveillanceStatus() fields.SurveillanceStatus {
	return message.SurveillanceStatus
}

// GetSingleAntennaFlag returns the SingleAntennaFlag
func (message *{{ .Name }}) GetSingleAntennaFlag() fields.SingleAntennaFlag {
	return message.SingleAntennaFlag
}

// GetAltitude returns the Altitude
func (message *{{ .Name }}) GetAltitude() fields.Altitude {
	return message.Altitude
}

// GetTime returns the Time
func (message *{{ .Name }}) GetTime() fields.Time {
	return message.Time
}

// GetCPRFormat returns the CompactPositionReportingFormat
func (message *{{ .Name }}) GetCPRFormat() fields.CompactPositionReportingFormat {
	return message.CPRFormat
}

// GetEncodedLatitude returns the EncodedLatitude
func (message *{{ .Name }}) GetEncodedLatitude() fields.EncodedLatitude {
	return message.EncodedLatitude
}

// GetEncodedLongitude returns the EncodedLongitude
func (message *{{ .Name }}) GetEncodedLongitude() fields.EncodedLongitude {
	return message.EncodedLongitude
}

// GetHorizontalProtectionLimit returns the HorizontalProtectionLimit
func (message *{{ .Name }}) GetHorizontalProtectionLimit() fields.HorizontalProtectionLimit {
	return message.HorizontalProtectionLimit
}

// GetContainmentRadius returns the ContainmentRadius
func (message *{{ .Name }}) GetContainmentRadius() fields.ContainmentRadius {
	return message.ContainmentRadius
}

// read{{ .Name }} reads a message at the format BDS 0,5
func read{{ .Name }}(data []byte) (*{{ .Name }}, error) {

	formatTypeCode := (data[0] & 0xF8) >> 3

	if formatTypeCode != adsb.{{ .Name }}.GetTypeCode() {
		return nil, fmt.Errorf("the data are given at format %v and can not be read at the format {{ .Name }}", formatTypeCode)
	}

	horizontalProtectionLimit := hpl{{ if .IsBaro }}Barometric{{ else }}GNSS{{ end }}ByFormat[formatTypeCode]
	containmentRadius := cr{{ if .IsBaro }}Barometric{{ else }}GNSS{{ end }}ByFormat[formatTypeCode]

	return &{{ .Name }}{
		SurveillanceStatus:        fields.ReadSurveillanceStatus(data),
		SingleAntennaFlag:         fields.ReadSingleAntennaFlag(data),
		Altitude:                  fields.ReadAltitude(data),
		Time:                      fields.ReadTime(data),
		CPRFormat:                 fields.ReadCompactPositionReportingFormat(data),
		EncodedLatitude:           fields.ReadEncodedLatitude(data),
		EncodedLongitude:          fields.ReadEncodedLongitude(data),
		HorizontalProtectionLimit: horizontalProtectionLimit,
		ContainmentRadius:         containmentRadius,
	}, nil
}
`))
