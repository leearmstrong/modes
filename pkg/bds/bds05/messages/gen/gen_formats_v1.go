// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates list_converter.go. It can be invoked by running
// go generate

package main

import (
	"log"
	"os"
	"text/template"
	"time"
)

func main() {
	generateFile("format_09_v1.go", "Format09V1", true)
	generateFile("format_10_v1.go", "Format10V1", true)
	generateFile("format_11_v1.go", "Format11V1", true)
	generateFile("format_12_v1.go", "Format12V1", true)
	generateFile("format_13_v1.go", "Format13V1", true)
	generateFile("format_14_v1.go", "Format14V1", true)
	generateFile("format_15_v1.go", "Format15V1", true)
	generateFile("format_16_v1.go", "Format16V1", true)
	generateFile("format_17_v1.go", "Format17V1", true)
	generateFile("format_18_v1.go", "Format18V1", true)
	generateFile("format_20_v1.go", "Format20V1", false)
	generateFile("format_21_v1.go", "Format21V1", false)
	generateFile("format_22_v1.go", "Format22V1", false)
}

func generateFile(fileName string, name string, isBaro bool) {
	// Open the target file
	f, err := os.Create(fileName)
	if err != nil {
		log.Fatal(err)
	}

	// Close at the end
	defer func() {
		closeErr := f.Close()
		if closeErr != nil {
			log.Fatal(err)
		}
	}()

	// Execute the template
	err = builderTemplate.Execute(
		f,
		struct {
			Timestamp time.Time
			Name      string
			IsBaro    bool
		}{
			Timestamp: time.Now(),
			Name:      name,
			IsBaro:    isBaro,
		})
	if err != nil {
		log.Fatal(err)
	}
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var builderTemplate = template.Must(template.New("").Parse(`// Package messages holds the definition of the messages
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_formats_v1.go at {{ .Timestamp }}
package messages

import (
	"fmt"
	"github.com/twuillemin/modes/pkg/bds/adsb"
	"github.com/twuillemin/modes/pkg/bds/bds"
	"github.com/twuillemin/modes/pkg/bds/bds05/fields"
)

// ------------------------------------------------------------------------------------
//
//                                {{ .Name }}
//
// ------------------------------------------------------------------------------------

// {{ .Name }} is a message at the format BDS 0,5 for ADSB V1
type {{ .Name }} struct {
	SurveillanceStatus          fields.SurveillanceStatus
	SingleAntennaFlag           fields.SingleAntennaFlag
	Altitude                    fields.Altitude
	Time                        fields.Time
	CPRFormat                   fields.CompactPositionReportingFormat
	EncodedLatitude             fields.EncodedLatitude
	EncodedLongitude            fields.EncodedLongitude
	HorizontalContainmentRadius fields.HorizontalContainmentRadius{{ if .IsBaro }}Barometric{{ else }}GNSS{{ end }}V1
	NavigationIntegrityCategory byte
}

// GetMessageFormat returns the ADSB format of the message
func (message *{{ .Name }}) GetMessageFormat() adsb.MessageFormat {
	return adsb.{{ .Name }}
}

// GetRegister returns the register of the message
func (message *{{ .Name }}) GetRegister() bds.Register {
	return adsb.{{ .Name }}.GetRegister()
}

// ToString returns a basic, but readable, representation of the message
func (message *{{ .Name }}) ToString() string {
	return bds05v1ToString(message)
}

// GetSurveillanceStatus returns the Surveillance Status
func (message *{{ .Name }}) GetSurveillanceStatus() fields.SurveillanceStatus {
	return message.SurveillanceStatus
}

// GetSingleAntennaFlag returns the SingleAntennaFlag
func (message *{{ .Name }}) GetSingleAntennaFlag() fields.SingleAntennaFlag {
	return message.SingleAntennaFlag
}

// GetAltitude returns the Altitude
func (message *{{ .Name }}) GetAltitude() fields.Altitude {
	return message.Altitude
}

// GetTime returns the Time
func (message *{{ .Name }}) GetTime() fields.Time {
	return message.Time
}

// GetCPRFormat returns the CompactPositionReportingFormat
func (message *{{ .Name }}) GetCPRFormat() fields.CompactPositionReportingFormat {
	return message.CPRFormat
}

// GetEncodedLatitude returns the EncodedLatitude
func (message *{{ .Name }}) GetEncodedLatitude() fields.EncodedLatitude {
	return message.EncodedLatitude
}

// GetEncodedLongitude returns the EncodedLongitude
func (message *{{ .Name }}) GetEncodedLongitude() fields.EncodedLongitude {
	return message.EncodedLongitude
}

// GetHorizontalContainmentRadius returns the HorizontalContainmentRadius
func (message *{{ .Name }}) GetHorizontalContainmentRadius() fields.HorizontalContainmentRadius {
	return message.HorizontalContainmentRadius
}

// GetNavigationIntegrityCategory returns the Navigation Integrity Category
func (message *{{ .Name }}) GetNavigationIntegrityCategory() byte {
	return message.NavigationIntegrityCategory
}

// read{{ .Name }} reads a message at the format BDS 0,5{{ if .IsBaro }}	
func read{{ .Name }}(nicSupplementA bool, data []byte) (*{{ .Name }}, error) {
{{ else }}
func read{{ .Name }}(data []byte) (*{{ .Name }}, error) {
{{ end }}
	formatTypeCode := (data[0] & 0xF8) >> 3

	if formatTypeCode != adsb.{{ .Name }}.GetTypeCode() {
		return nil, fmt.Errorf("the data are given at format %v and can not be read at the format {{ .Name }}", formatTypeCode)
	}
{{ if .IsBaro }}
	hcr, nic := getHCRAndNICForV1Barometric(formatTypeCode, nicSupplementA)
{{ else }}
	hcr, nic := getHCRAndNICForV1GNSS(formatTypeCode)
{{ end }}
	return &{{ .Name }}{
		SurveillanceStatus:          fields.ReadSurveillanceStatus(data),
		SingleAntennaFlag:           fields.ReadSingleAntennaFlag(data),
		Altitude:                    fields.ReadAltitude(data),
		Time:                        fields.ReadTime(data),
		CPRFormat:                   fields.ReadCompactPositionReportingFormat(data),
		EncodedLatitude:             fields.ReadEncodedLatitude(data),
		EncodedLongitude:            fields.ReadEncodedLongitude(data),
		HorizontalContainmentRadius: hcr,
		NavigationIntegrityCategory: nic,
	}, nil
}
`))
