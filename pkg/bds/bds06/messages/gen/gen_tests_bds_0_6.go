// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates list_converter.go. It can be invoked by running
// go generate

package main

import (
	"log"
	"os"
	"text/template"
	"time"
)

func main() {
	// Open the target file
	f, err := os.Create("bds_0_6_test.go")
	if err != nil {
		log.Fatal(err)
	}

	// Close at the end
	defer func() {
		closeErr := f.Close()
		if closeErr != nil {
			log.Fatal(err)
		}
	}()

	type FormatDefinition struct {
		Name        string
		MessageCode string
	}

	formatDefinitions := []FormatDefinition{
		{Name: "Format05", MessageCode: "0x28"},
		{Name: "Format06", MessageCode: "0x30"},
		{Name: "Format07", MessageCode: "0x38"},
		{Name: "Format08", MessageCode: "0x40"},
	}

	// Execute the template
	err = builderTemplate.Execute(
		f,
		struct {
			Timestamp         time.Time
			FormatDefinitions []FormatDefinition
		}{
			Timestamp:         time.Now(),
			FormatDefinitions: formatDefinitions,
		})
	if err != nil {
		log.Fatal(err)
	}
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var builderTemplate = template.Must(template.New("").Parse(`// Package messages holds the definition of the messages
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_tests_bds_0_6.go at {{ .Timestamp }}
package messages

import (
	"github.com/twuillemin/modes/pkg/bds/adsb"
	"testing"
)
{{ range .FormatDefinitions }}
func TestDetectAndRead{{ .Name }}V0Valid(t *testing.T) {

	data := buildValidBDS06V0Message()
	data[0] = data[0] | {{ .MessageCode }}

	msg, adsbResult, err := ReadBDS06(adsb.ReaderLevel0OrMore, false, false, data)
	if err != nil {
		t.Fatal(err)
	}
	if _, ok := msg.(*{{ .Name }}V0); !ok {
		t.Errorf("expected a message of type {{ .Name }}V0, but got %v instead", msg.GetMessageFormat().ToString())
	}
	if adsbResult != adsb.ReaderLevel0OrMore {
		t.Errorf("expected adsbLevel to be returned as Level0OrMore, but got %v instead", adsbResult.ToString())
	}
}

func TestDetectAndRead{{ .Name }}V1Valid(t *testing.T) {

	data := buildValidBDS06V1Message()
	data[0] = data[0] | {{ .MessageCode }}

	msg, adsbResult, err := ReadBDS06(adsb.ReaderLevel1OrMore, false, false, data)
	if err != nil {
		t.Fatal(err)
	}
	if _, ok := msg.(*{{ .Name }}V1); !ok {
		t.Errorf("expected a message of type {{ .Name }}V1, but got %v instead", msg.GetMessageFormat().ToString())
	}
	if adsbResult != adsb.ReaderLevel1OrMore {
		t.Errorf("expected adsbLevel to be returned as Level0OrMore, but got %v instead", adsbResult.ToString())
	}
}

func TestDetectAndRead{{ .Name }}V2Valid(t *testing.T) {

	data := buildValidBDS06V2Message()
	data[0] = data[0] | {{ .MessageCode }}

	msg, adsbResult, err := ReadBDS06(adsb.ReaderLevel2, false, false, data)
	if err != nil {
		t.Fatal(err)
	}
	if _, ok := msg.(*{{ .Name }}V2); !ok {
		t.Errorf("expected a message of type {{ .Name }}V2, but got %v instead", msg.GetMessageFormat().ToString())
	}
	if adsbResult != adsb.ReaderLevel2 {
		t.Errorf("expected adsbLevel to be returned as Level2, but got %v instead", adsbResult.ToString())
	}
}
{{ end }}

func TestDetectBadFormat(t *testing.T) {

	// make a Format 01 message
	data := buildValidBDS06V0Message()
	data[0] = (data[0] & 0x07) | 0x08

	_, _, err := ReadBDS06(adsb.ReaderLevel0OrMore, false, false, data)
	if err == nil {
		t.Fatal("Expected an error while reading a message with format 01, but message was read")
	}
}`))
